---
source: near-sdk-macros/src/core_impl/code_generator/item_trait_info.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
pub mod test {
    use super::*;
    #[must_use]
    pub struct TestExt {
        pub(crate) account_id: ::near_sdk::AccountId,
        pub(crate) deposit: ::near_sdk::NearToken,
        pub(crate) static_gas: ::near_sdk::Gas,
        pub(crate) gas_weight: ::near_sdk::GasWeight,
    }
    impl TestExt {
        pub fn with_attached_deposit(mut self, amount: ::near_sdk::NearToken) -> Self {
            self.deposit = amount;
            self
        }
        pub fn with_static_gas(mut self, static_gas: ::near_sdk::Gas) -> Self {
            self.static_gas = static_gas;
            self
        }
        pub fn with_unused_gas_weight(mut self, gas_weight: u64) -> Self {
            self.gas_weight = ::near_sdk::GasWeight(gas_weight);
            self
        }
    }
    /// API for calling this contract's functions in a subsequent execution.
    pub fn ext(account_id: ::near_sdk::AccountId) -> TestExt {
        TestExt {
            account_id,
            deposit: ::near_sdk::NearToken::from_near(0),
            static_gas: ::near_sdk::Gas::from_gas(0),
            gas_weight: ::near_sdk::GasWeight::default(),
        }
    }
    impl TestExt {
        pub fn test(self, v: Vec<String>) -> ::near_sdk::Promise {
            let __args = {
                #[derive(::near_sdk::borsh::BorshSerialize)]
                #[borsh(crate = "::near_sdk::borsh")]
                struct Input<'nearinput> {
                    v: &'nearinput Vec<String>,
                }
                let __args = Input { v: &v };
                ::near_sdk::borsh::to_vec(&__args)
                    .expect("Failed to serialize the cross contract args using Borsh.")
            };
            ::near_sdk::Promise::new(self.account_id)
                .function_call_weight(
                    ::std::string::String::from("test"),
                    __args,
                    self.deposit,
                    self.static_gas,
                    self.gas_weight,
                )
        }
    }
}

