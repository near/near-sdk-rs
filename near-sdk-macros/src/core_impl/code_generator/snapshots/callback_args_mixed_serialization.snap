---
source: near-sdk-macros/src/core_impl/code_generator/item_impl_info.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
#[cfg(target_arch = "wasm32")]
#[no_mangle]
pub extern "C" fn method() {
    ::near_sdk::env::setup_panic_hook();
    if ::near_sdk::env::current_account_id() != ::near_sdk::env::predecessor_account_id()
    {
        ::near_sdk::env::panic_str("Method method is private");
    }
    #[derive(::near_sdk::borsh::BorshDeserialize)]
    #[borsh(crate = "::near_sdk::borsh")]
    struct Input {
        y: ::std::string::String,
    }
    let Input { y }: Input = ::near_sdk::borsh::BorshDeserialize::try_from_slice(
            &::near_sdk::env::input()
                .expect("Expected input since method has arguments."),
        )
        .expect("Failed to deserialize input from Borsh.");
    let data: ::std::vec::Vec<u8> = match ::near_sdk::env::promise_result(0u64) {
        ::near_sdk::PromiseResult::Successful(x) => x,
        _ => ::near_sdk::env::panic_str("Callback computation 0 was not successful"),
    };
    let mut x: u64 = ::near_sdk::borsh::BorshDeserialize::try_from_slice(&data)
        .expect("Failed to deserialize callback using Borsh");
    let data: ::std::vec::Vec<u8> = match ::near_sdk::env::promise_result(1u64) {
        ::near_sdk::PromiseResult::Successful(x) => x,
        _ => ::near_sdk::env::panic_str("Callback computation 1 was not successful"),
    };
    let z: ::std::vec::Vec<u8> = ::near_sdk::serde_json::from_slice(&data)
        .expect("Failed to deserialize callback using JSON");
    let contract: Hello = ::near_sdk::env::state_read().unwrap_or_default();
    contract.method(&mut x, y, z);
}

