error: At least one of `json` or `borsh` inside of `#[abi(...)]` must be specified
  --> compilation_tests/schema_derive_invalids.rs:9:1
   |
9  | / #[abi]
10 | | struct Nada;
   | |____________^

error: At least one of `json` or `borsh` inside of `#[abi(...)]` must be specified
  --> compilation_tests/schema_derive_invalids.rs:13:1
   |
13 | / #[abi()]
14 | | struct Empty;
   | |_____________^

error: Unknown field: `serde`
  --> compilation_tests/schema_derive_invalids.rs:17:7
   |
17 | #[abi(serde)]
   |       ^^^^^

error: Unknown field: `serde`
  --> compilation_tests/schema_derive_invalids.rs:21:13
   |
21 | #[abi(json, serde)]
   |             ^^^^^

error: Unknown field: `serde`
  --> compilation_tests/schema_derive_invalids.rs:25:13
   |
25 | #[abi(json, serde, schemars)]
   |             ^^^^^

error: Unknown field: `schemars`
  --> compilation_tests/schema_derive_invalids.rs:25:20
   |
25 | #[abi(json, serde, schemars)]
   |                    ^^^^^^^^

error: Unknown field: `serde`
  --> compilation_tests/schema_derive_invalids.rs:29:13
   |
29 | #[abi(json, serde = "?")]
   |             ^^^^^

error: `NearSchema` does not support derive for unions
  --> compilation_tests/schema_derive_invalids.rs:33:1
   |
33 | / union Unsupporteed {
34 | |     a: u8,
35 | |     b: u16,
36 | | }
   | |_^

error: At least one of `json` or `borsh` inside of `#[abi(...)]` must be specified
  --> compilation_tests/schema_derive_invalids.rs:39:1
   |
39 | / #[abi()]
40 | | union UnsupporteedWithoutArgs {
41 | |     a: u8,
42 | |     b: u16,
43 | | }
   | |_^

error: `NearSchema` does not support derive for unions
  --> compilation_tests/schema_derive_invalids.rs:47:1
   |
47 | / union UnsupporteedWithArgs {
48 | |     a: u8,
49 | |     b: u16,
50 | | }
   | |_^

error[E0277]: the trait bound `Inner: JsonSchema` is not satisfied
 --> compilation_tests/schema_derive_invalids.rs:6:14
  |
6 | struct Outer(Inner);
  |              ^^^^^ the trait `JsonSchema` is not implemented for `Inner`
  |
  = help: the following other types implement trait `JsonSchema`:
            bool
            char
            isize
            i8
            i16
            i32
            i64
            i128
          and $N others
note: required by a bound in `SchemaGenerator::subschema_for`
 --> $CARGO/schemars-0.8.16/src/gen.rs
  |
  |     pub fn subschema_for<T: ?Sized + JsonSchema>(&mut self) -> Schema {
  |                                      ^^^^^^^^^^ required by this bound in `SchemaGenerator::subschema_for`
